openapi: 3.0.3
info:
  title: Customer Service API
  version: 1.0.0
servers:
  - url: http://localhost:8082/api
paths:
  /customer/create:
    post:
      tags:
        - Create Customer
      summary: Crear cliente
      operationId: PostCustomerCreateRequest
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerInput' }
      responses:
        '201':
          description: Cliente creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
        '409':
          description: Identificación duplicada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Ya existe un cliente con esa identificación."
  /customers:
    get:
      tags:
        - List Customers
      summary: Listar clientes
      operationId: GetCustomersListResponse
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerOutput'
  /customer/{customerId}:
    get:
      tags:
        - Get Customer by CustomerId
      summary: Obtener cliente por CustomerId
      operationId: GetCustomerByCustomerIdResponse
      parameters:
        - in: path
          name: customerId
          schema: { type: string, format: uuid }
          required: true
          description: Identificador único del cliente (UUID)
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
    put:
      tags:
        - Update Customer by CustomerId
      summary: Actualizar cliente por CustomerId
      operationId: PutCustomerUpdateByCustomerIdRequest
      parameters:
        - in: path
          name: customerId
          schema: { type: string, format: uuid }
          required: true
          description: Identificador único del cliente (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerInput' }
      responses:
        '200':
          description: Cliente actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
    patch:
      tags:
        - Partial Update Customer by CustomerId
      summary: Actualizar parcialmente cliente por CustomerId
      operationId: PatchCustomerUpdateByCustomerIdRequest
      parameters:
        - in: path
          name: customerId
          schema: { type: string, format: uuid }
          required: true
          description: Identificador único del cliente (UUID)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPatchInput'
      responses:
        '200':
          description: Cliente actualizado parcialmente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
    delete:
      tags:
        - Delete Customer by CustomerId
      summary: Eliminar cliente por CustomerId
      operationId: DeleteCustomerByCustomerIdRequest
      parameters:
        - in: path
          name: customerId
          schema: { type: string, format: uuid }
          required: true
          description: Identificador único del cliente (UUID)
      responses:
        '200':
          description: Cliente eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "El cliente fue eliminado correctamente."

components:
  schemas:
    CustomerInput:
        type: object
        required:
          - firstName
          - lastName
          - identification
        properties:
          firstName:
            type: string
            minLength: 1
            maxLength: 50
            description: "Customer's first name. Required. Máximo 50 caracteres."
          lastName:
            type: string
            minLength: 1
            maxLength: 50
            description: "Customer's last name. Required. Máximo 50 caracteres."
          identification:
            type: string
            minLength: 10
            maxLength: 13
            pattern: "^[0-9]+$"
            description: "Identificación única del cliente. Requerido. Entre 10 y 13 dígitos."
          address:
            type: string
            maxLength: 255
            description: "Dirección del cliente. Opcional. Máximo 255 caracteres."
          phone:
            type: string
            minLength: 10
            maxLength: 10
            pattern: "^[0-9]+$"
            description: "Teléfono del cliente. Opcional. Máximo 10 caracteres."

    CustomerOutput:
      type: object
      required:
        - idCustomer
        - firstName
        - lastName
        - identification
        - createdAt
        - updatedAt
      properties:
        idCustomer:
          type: string
          format: uuid
          description: "Identificador único del cliente (UUID)."
          example: "b7e6a2e2-8c2e-4e2a-9e2a-123456789abc"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Customer's first name. Máximo 50 caracteres."
          example: "Juan"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Customer's last name. Máximo 50 caracteres."
          example: "Pérez"
        identification:
          type: string
          minLength: 10
          maxLength: 13
          pattern: "^[0-9]+$"
          description: "Identificación única del cliente. Entre 10 y 13 dígitos."
          example: "1234567890"
        address:
          type: string
          maxLength: 255
          description: "Dirección del cliente. Máximo 255 caracteres."
          example: "Av. Siempre Viva 123"
        phone:
          type: string
          minLength: 10
          maxLength: 10
          pattern: "^[0-9]+$"
          description: "Teléfono del cliente. Máximo 10 caracteres."
          example: "0998765432"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "Fecha de creación del registro."
          example: "2025-09-28T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: "Fecha de última actualización del registro."
          example: "2025-09-28T12:00:00Z"

    CustomerPatchInput:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Customer's first name. Máximo 50 caracteres."
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Customer's last name. Máximo 50 caracteres."
        identification:
          type: string
          minLength: 10
          maxLength: 13
          pattern: "^[0-9]+$"
          description: "Identificación única del cliente. Entre 10 y 13 dígitos."
        address:
          type: string
          maxLength: 255
          description: "Dirección del cliente. Máximo 255 caracteres."
        phone:
          type: string
          minLength: 10
          maxLength: 10
          pattern: "^[0-9]+$"
          description: "Teléfono del cliente. Máximo 10 caracteres."
          